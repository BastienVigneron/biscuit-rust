//! error types
//!
#[derive(Clone, Debug, PartialEq)]
pub enum Token {
    InternalError,
    /// error deserializing or verifying the token
    Format(Format),
    /// the authority block must have the index 0
    InvalidAuthorityIndex(u32),
    /// the block index does not match its position
    InvalidBlockIndex(InvalidBlockIndex),
    /// multiple blocks declare the same symbols
    SymbolTableOverlap,
    /// the symbol table is missing either "authority" or "ambient"
    MissingSymbols,
    /// tried to append a block to a sealed token
    Sealed,
    /// caveat validation failed
    FailedLogic(Logic),
    /// Datalog parsing error
    ParseError,
}

#[derive(Clone, Debug, PartialEq)]
pub struct InvalidBlockIndex {
    pub expected: u32,
    pub found: u32,
}

#[derive(Clone, Debug, PartialEq)]
pub enum Format {
    /// failed verifying the signature
    Signature(Signature),
    /// failed verifying the signature of a sealed token
    SealedSignature,
    /// the token does not provide intermediate public keys
    EmptyKeys,
    /// the root public key was not recognized
    UnknownPublicKey,
    /// could not deserialize the wrapper object
    DeserializationError(String),
    /// could not serialize the wrapper object
    SerializationError(String),
    /// could not deserialize the block
    BlockDeserializationError(String),
    /// could not serialize the block
    BlockSerializationError(String),
}

#[derive(Clone, Debug, PartialEq)]
pub enum Signature {
    /// could not parse the signature elements
    InvalidFormat,
    /// the signature did not match
    InvalidSignature,
}

#[derive(Clone, Debug, PartialEq)]
pub enum Logic {
    /// a fact provided or generated by the verifier did not have the ambient tag
    InvalidAmbientFact(String),
    /// a fact provided or generated by a block had the authority or ambient tag
    InvalidBlockFact(u32, String),
    /// list of caveats that failed validation
    FailedCaveats(Vec<FailedCaveat>),
}

#[derive(Clone, Debug, PartialEq)]
pub enum FailedCaveat {
    /// a caveat failed in a block
    Block(FailedBlockCaveat),
    /// a caveat provided by the verifier failed
    Verifier(FailedVerifierCaveat),
}

#[derive(Clone, Debug, PartialEq)]
pub struct FailedBlockCaveat {
    pub block_id: u32,
    pub caveat_id: u32,
    /// pretty print of the rule that failed
    pub rule: String,
}

#[derive(Clone, Debug, PartialEq)]
pub struct FailedVerifierCaveat {
    pub block_id: u32,
    pub caveat_id: u32,
    /// pretty print of the rule that failed
    pub rule: String,
}
